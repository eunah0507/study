. JDBC

  : JDBC(Java Database Connectivity)는 자바 프로그램에서 데이터베이스와
    연결하여 데이터베이스 관련 작업을 할 수 있도록 해주는 자바 프로그래밍 인터페이스를
    위한 API(Application Programing Interface)규격이다.
    
    JDBC는 Driver, DriverManager, Connection, Statement, ProperedStatement,
    ResultSet, DataSource 등 여러 클래스와 인터페이스로 구성된 페키지
    java.sql* 와 javax.sql*로 구성되어 있다.
    
    JDBC는 다음과 같은 데이터베이스 기능을 지원하기 위한 표준 API를 제공하고 있다.
    
      . 데이터베이스를 연결하여 테이블 형태의 자료를 참조
      . SQL 문을 질의
      . SQL 문의 결과를 처리
      
 
  . JDBC 역할
  
    : ODBC(Open Database Connectivity)는 JDBC보다 먼저 마이크로소프트사가
      개발한 것으로 C, C++ 등의 언어를 이용하여 DBMS에 독립적으로 데이터베이스 프로그래밍을
      하도록 하는 API 규격이다. JDBC도 ODBC와 마찬가지로 DBMS의 종류에 상관없이
      쉽게 SQL문을 수행하고 그 결과를 처리하도록 설계되어있다.
      
      즉 한번 JDBC로 작성된 프로그램은 Oracle, Mysql, SqlServer, DB2 등 어떤
      DB를 사용하던지 소스의 수정을 최소화하여 바로 실행할 수 있다.
      
      
   . JDBC 프로그래밍 절차
   
     : 일반적으로 Java JDBC 프로그램은 6단계로 구성된다.
     
     
     1. JDBC 드라이버 로드 : Class.forName("oracle.jdbc.driver.OracleDriver");
     
       : 드라이버 이름을 호출하여 DriverManager에 Driver가
         등록되고 거기서 Connection을 얻어 쓸 수 있다.
         
         API를 사용하여 로드한 클래스를 런타임에 응용 프로그램에 
         동적으로 바인딩 된다
         
         동적으로 JDBC 드라이브 클래스를 로드하는 것으로 지정한
         드라이버 클래스가 객체화 되고 객체화와 동시에 자동적으로
         DriverManager.registerDriver()을 호출하여
         DriverManager에서 관리하는 드라이버 리스트에 등록이 이루어진다.
         
     
     2. 데이터베이스 연결
     
       DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE",
       								"scott","tiger");
       
     3. SQL을 위한 Statement 객체 생성
     
       Statement stmt = conn.createStatement();
     
     4. SQL 문장 실행 : String sql = "select * from emp";
     				
     				  ResultSet result = stmt.executeQuery(sql);
     
     5. 질의 결과 ResultSet 처리
     			
     			While(result.next())
     				{
     					String col1 = result.getString(1);
     					String col2 = result.getString(2);
     					int col3 = result.getInt(3);
     				}
     
     6. JDBC 객체 연결 해제  : result.close();
     						stmt.close();
     						conn.close();
     						
     
     
     JDBC 관련 기본 클래스
     
     
     패키지				클래스				클래스 용도						메소드
     
     					class				지정된 JDBC드라이버를			forName()
     										런타임시 메모리에 로드
     java.lang			
     					DriveManager		여러 JDBC를 관리하는 클래스로		getConnection()
     										데이터베이스에 접속하여
     										연결 객체 반환
     										
     java.sql			Connection			특정한 데이터베이스 연결 상태를		createStatement()
     										표현하는 클래스로 질의할
     										문장 객체를 반환
     				
     					Statement			데이터베이스에 SQL 질의 문장을		executeQuery()
     										질의 하여 그 결과인 
     										집합(ResultSet)객체를 반환
     										
     					ResultSet			질의 결과의 자료를 저장			next();
     																	getString();
     																	getInt();