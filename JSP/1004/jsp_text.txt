. JSP(Java Server Page)

  : JSP는 선 마이크로 시스템사가 개발한 인터넷 서버 프로그래밍 기술이다.
    선마이크로 시스템사는 자바언어를 기반으로 하는 
    인터넷 서버 프로그래밍 방식인
    서블릿(Servelets)을 먼저 개발하여 과거의
    CGI(Common Gate Interface)개발 방식을 대체하였다.
    
    그러나 자바를 이용하는 서블릿 개발방식이 그리 쉽지 않고 ASP, PHP와 같이
    HTML 코드 내에 직접 비즈니스 로직을 삽입할 수 있는 개발 방식이 필요하게 되어
    개발한 기술이 JSP이다.
    그러나 JSP는 서블릿과 동떨어진 기술이 아니며
    JSP가 실제로 웹 어플리케이션 서버에서 사용자에게 서비스가 될 때는
    서블릿으로 변경되어 서비스된다.
    
    ASP는 VBScript를 사용하지만 JSP는 자바 기반의 문법을 사용하여
    어려운 자바소스 코드를 대신에 태그를 사용해 자바 객체를 사용한다.
    또한 JSP는 JavaBeans(자바빈즈)라는 콤포넌트르 사용해
    비즈니스 로직과 프리젠테이션 로직을 완전히 분리해 응용 프로그램을 구현할 수 있다.
    
    JSP는 플랫폼에 독립적인 기술방식이다. 시스템 플랫폼이 윈도우 NT이던
    유닉스 시스템이든 어느 한 플랫폼에서 개발한 시스템을 다른 플랫 폼에서 
    운영하는 것이 가능하다.
    또한 JSP는 웹 서버에 독립적이다.
    
    
    
 . JSP 엔진(컨테이너)
 
   : JSP 프로그램은 하나의 서블릿 프로그램으로 변환되어 실행한다.
     즉 hello.jsp인 JSP 프로그램은 hello.jsp소스에서
     hello_jsp.java의 서블릿 프로그램이 생성된 후, 이 서블릿 소스가
     컴파일디어 hello_jsp.class클래스가 생성된다. 그러므로 클라이언트가
     hello.jsp를 요청하면 서버는 대응하는 JSP서블릿 클래스인
     hello_jsp.class를 실행하여 클라이언트에 응답한다.
     
     여기서 JSP파일에서 생성되는 서블릿 파일의 이름은 시스템마다 다를 수 있다.
     이러한 JSP소스에서 서블릿 소스 및 서블릿 클래스 생성을 처리하는
     서버 모듈을 JSP엔진 또는 JSP컨테이너라고 부른다.
     
     이러한 JSP엔진은 웹 서버와 분리되어 독자적으로 설치할 수 있으며
     JSP엔진이 포함된 웹 서버를 이용할 수 있다.
     
     JSP엔진으로는 tomcat, resin(레진), JRun 등이 있다.
     
     
 . JSP 기본 문법
 
   : JSP는 HTML 태그와 동일하게 모든 태그가 '<'로 시작하고 '>'문자로
     끝나는 스크립트 지향 태그와 주석 태그 XML 기반의 액션태그,
     커스텀 태그로 구성되고, JSP는 태그를 이용하여 고유한 문법을
     기술하는 서버 프로그래밍 방식이다.
     
     
          스크립트 태그 종류				형식			의미
          
          Directives(지시어)			<%@	%>		JSP 페이지의 속성을 지정
          Declaration(선언)			<%@ %>		소속 변수 선언과 메소드 정의
          Expression(표현식)			<%= %>		변수, 계산식, 함수 호출 결과를
          										문자열 형태로 출력
          Scriptlet(스크립트릿)			<%  %>		자바 코드 기술
          Comments(주석)				<%-- --%>	주석, JSP 페이지의 설명 기술
          
 . JSP 실행과 라이프 사이클
 
   1. 클라이언트가 jsp 프로그램을 요청하면 jsp 소스를 해당 jsp 서블릿으로
      변환하면서 시작한다.
      
   2. 이미 클래스가 있다면 메모리에 로드되어 있는지 검사한다.
   	  이미 메모리에 로드되어 있다면 5번을 실행한다.
   
   3. JSP 서블릿 코드를 컴파일하여 서블릿 코드를 생성한다.
   
   4. JSP 서블릿 클래스를 메모리에 로드한다.
   
   5. 메모리에 로드된 JSP서블릿을 실행한다.
   
   6. JSP 서블릿의 응답을 생성하여 클라이언트에 응답한다.
   
  
  . JSP 라이프 사이클
  
     메모리				기능
     
     _jspInit()			요구되는 자원이 연결 드의 초기화 작업 수행
      					. 메모리에 로드되지 않은 서블릿 요청시
      					
     _jspService()		실제 클라이언트의 요청에 대한 직접 처리 수행으로
      					클라이언트 요청 때 마다 반복 수행
      					. 메모리에 로드된 서블릿 요청시
     
     _jspDestroy()		웹 서버 또는 어플리케이션이 종료 되는 경우에
     					메모리에서 언로드 하는 경우, jsp 서블릿 종료를 위한
     					작업 수행.
     					. 어플리케이션이 종료되어 서블릿 메모리에서 언로드