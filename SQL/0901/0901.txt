  Q. dept_02 테이블에서 20번 부서의 지역명을 40 번 부서의 지역명으로 바꾸세요
      1. update dept_02 set loc  = (select loc from dept_02 where deptno =40) where deptno in(20);
      2. update dept_02 set loc  = (select loc from dept_02 where deptno =40) where deptno =20;
        
        
  Q. emp_02 테이블에서 'SALESMAN'의 급여는 2500 입사일을 그제 날짜로 바꾸세요.
         update emp_02 set sal = 2500,hiredate=sysdate-2  
         where job ='SALESMAN';
         
  Q. emp_02 테이블의 사원이름에 'T'가 들어가는 사원의 
        월급을 7000원 인상하고 입사일을 모레로 바꾸세요
        update emp_02 set sal = sal +7000,hiredate = sysdate +2 
        where ename like '%T%';   
        
  Q. emp_02 테이블에서'CHICAGO'에서 근무하는 사원들의 입사일을 본인의 생일로 바꾸세요
        update emp_02 set hiredate = '94/06/23' where deptno =(select deptno from dept_02 where loc = 'CHICAGO');
        
  Q. emp_02테이블의 사원들 중에서 '09'월에 입사한 사원들의 월급을 1000원 인상하세요
      3가지 방법 사용 (substr,instr,to_char)
      
      update emp_02 set sal =sal+1000 where substr(hiredate,4,2)='09';               
      update emp_02 set sal =sal+1000 where instr(hiredate,'09',4,1)=4;
      update emp_02 set sal =sal+1000 where to_char(hiredate,'MM')=09; => 이거 쓰지마!!
 
 
 . DELETE(삭제) (DELETE명령은 COMMIT되지 않는다)**복사본으로 테스트하기!!**
 
   
   : DELETE FROM 테이블명
     WHERE 조건절
     
     Q. 근무지가 'NEW YORK'인 사원들을 emp_02에서
          삭제하세요 
          DELETE FROM emp_02 
          where deptno = (select deptno from dept_02 where loc ='NEW YORK');         
          
     Q. COMM 이 NULL인 사원들을 삭제
          DELETE from emp_02
          where comm is null;    
           
     Q. emp_02테이블에서 부서별로 가장 많은 급여를 받는 사원들을 삭제
     
          DELETE from emp_02
          where sal in(select max(sal) from emp_02 group by deptno); 
          // = 은 값 하나만 나올 때 지금은 그룹별로 많이 받는 사원들 삭제니까 in을 써야해!!
     
     
 .MERGE (합병) 
  
  : 테이블 합병 
  
  => 구조가 같은 두 테이블을 하나의 테이블로 
     합하는 기능    
     
     .기존 테이블에 자료가 존재하는 경우 : 새로운 값으로 UPDATE(갱신)
     .자료가 존재하지 않는 경우 : 새로운 행으로 INSERT(추가)
     
  . 형식
    
  MERGE INTO (변경할 테이블명)          //값을 변경할 테이블을 선언한다.
        USING(값을 가져올 테이블명)      //어디에서 값을 가져올지 명시해준다.
        ON (조인 조건)                //조인 조건을 명시해준다.
          
  WHEN MATCHED THEN                //매치되는 값들이 있을 때에
             UPDATE SET              -업데이트(수정)한다.
             컬럼1 = 값1,              -컬럼1에 값1을 대치함
             컬럼2 = 값2,
  WHEN NOT MATCHED THEN             //매치되는 값들이 없을 때
             INSERT (컬럼1, 컬럼2...) 
             VALUES (값1,값2...)      //새로운 값 삽입                     
 
 MERGE INTO emp_01     e
       USING  emp_03   m
 ON(e.empno=m.empno)
 WHEN MATCHED THEN
      UPDATE SET      
           e.ename = m.ename,
           e.job = m.job,
           e.mgr = m.mgr,
           e.hiredate =m.hiredate,
           e.sal =m.sal,
           e.comm= m.comm,
           e.deptno =m.deptno
  WHEN NOT MATCHED THEN 
       INSERT VALUES (m.empno,m.ename,m.job,m.mgr,
                      m.hiredate,m.sal,m.comm,m.deptno);  

. Transaction (트랜젝션)
  
      : 데이터베이스에서 트렌젝션이란 데이터 처리의 한 단위를 말한다

        오라클에서 발생하는 여러개의 SQL 명령문을 하나의
	작업 단위로 처리하는데 이를 트렌젝션이라고 한다.

	트렌젝션은 '하나의 논리적인 작업단위로 수행되는 일련의 작업'
	으로 정의한다.
	트렌젝션은 ACID라고 불리는 특성이 있다.

	1. Atomicoty(원자성) : 트렌젝션은 분리할 수 없는 하나의 단위이다. 
			     작업이 모두 수행되거나 하나도 수행되지 않아야 한다.
			     All or Nothing

	2. Consistency(일관성) : 트렌젝션에서 사용되는 모든 데이터는 일관되어야 한다.

	3. Isolation(격리성) : 현재 트렌젝션에 접근하고 있는 데이터는
		    (독립성)   다른 트렌젝션으로 부터 격리되어야 한다.
	         	     (트렌젝션이 일어나면 완료되기 전까지는 다른
		              트렌젝션이 참조할 수 없다.)

	4. Durability(영속성) : 트렌젝션이 정상적으로 종료되면
		     (지속성)   그 결과는 시스템 오류가 발생하더라도 시스템에 
		     (내구성)   영구적으로 적용되어야 한다.

	
	. 트렌젝션 명령어

	. COMMIT : commit은 트렌젝션의 처음과 끝을 나타낸다.
		   즉 commit ~ commit 까지가 TRANSACTION 이다.

	. ROLLBACK : ROLLBACK은 트렌젝션을 취소하고 난 뒤
		     처음부터 다시 시작하거나 SAVEPOINT부터 취소하고
		     다시 되돌리는 기능을 한다
	
	. SAVAPOINT : 세이브 포인트는 현재까지의 트렌젝션을 
		      특정 이름으로 저장할 때 사용한다.


        . COMMIT 명령어와 ROLLBACK 명령어의 장점
	  
	  . 데이터 무결성이 보장됩니다.
	  . 영구적인 변경전에 데이터의 변경사항을 확인할 수 있습니다.
	  . 논리적으로 연관된 작업을 그룹화할 수 있습니다.


	. COMMIT

	. TRANSACTION (INSERT, UPDATE, DELETE) 작업내용을
			실제 데이터베이스에 저장합니다.

	. 이전 데이터가 완전히 업데이트 됩니다.
	. 모든 사용자가 변경된 데이터의 결과를 볼 수 있습니다.


	. ROLLBACK

	  . TRANSACTION(INSERT, UPDATE, DELETE) 작업내용을 취소합니다.
	  . 이전에 COMMIT 한 곳 까지만 복구합니다.


	. 자동 COMMIT과 자동 ROLLBACK 명령이 되는 경우
	  
	  . SQLPLUS가 정상 종료 되었다면 자동 COMMIT되지만 비정상 종료 되었다면 
	    자동 ROLLBACK 됩니다.

	  . DDL과 DCL 명령문이 수행된 경우 자동으로 COMMIT 됩니다.

	  . 정전이 발생하거나 컴퓨터 다운시 자동으로 ROLLBACK 됩니다.


	. DCL(Data Control Language)

	  : DCL은 데이터 제어 언어로 데이터, 트랜잭션을 저장 및 취소하는 
	    COMMIT과 ROLLBACK 명령어가 있고

	    DB 권한을 부여 및 삭제하는 GRANT / REVOKE가 있습니다.

	    COMMIT / ROLLBACK : 데이터, 트랜젝션 저장 / 취소
	    GRANT / REVOKE : DB 권한 부여 / 삭제


	 . SAVE POINT

	   : 현재의 트랜젝션을 작게 분할 할 수 있다.

	     저장된 SAVEPOINT는 ROLLBACK TO SAVEPOINT를 사용하여
	     표시한 SAVEPOINT까지 롤백 가능하다.

	     여러개의 SQL문 실행을 수반하는 Transaction의 경우
	     사용자가 트랜젝션 중간 단계에서 SAVEPOINT를 지정할 수 있다.


	     형식

	     SAVEPOINT 포인트 이름; => 특정 위치 지정

	     ROLLBACK TO 포인트 이름; => 특정 위치로 되돌리기

	     (commit은 savepoint의 의미가 없다)


	     . TRUNCATE(DDL)와 DELETE(DML)의 명령차이

	       TRUNCATE 자동저장, 레코드 지울 때 한번에 다 지워버림(롤백안됨)

	       DELETE COMMIT 사용, 롤백하면 지운거 되살아남


	     . 무결성 제약조건 (Data Integrity Constraint Rule)

	       : 테이블에 부적절한 자료가 입력되는 것을 방지하기 위해서
	         테이블을 생성할 때 각 컬럼에 대해서 정의하는 여러가지 규칙을 말한다.

		 . 무결성 : 데이터베이스 내에 있는 데이터의 정확성 유지
		 . 제약조건 : 바람직하지 않은 데이터가 저장되는 것을 방지하는 것

		 데이터 무결성 제약조건의 특징

		 . 테이블 생성시 무결성 제약조건을 정의하여 프로그래밍 과정을 줄여준다.

		 . 데이터베이스 서버에 의해 무결성 제약조건이 관리되어 
		   데이터 오류 발생 가능성을 줄여준다.

		 . 테이블에 대해 정의되고 데이터 딕셔너리에 저장된다.

		 . 일시적으로 활성화 또는 비활성화 할 수 있다.

	     . 무결성 제약 조건		역할
	
	       NOT NULL			NULL을 허용하지 않는다.
	       
	       UNIQUE			중복된 값을 허용하지 않는다.
					항상 유일한 값을 갖도록 한다.

	       PRIMARY KEY(기본키)	NULL을 허용하지 않고
	       				중복된 값을 허용하지 않는다.
					NOT NULL조건과 UNIQUE 조건을 결합한 형태이다.

	       FOREIGN KEY(외래키)	참조되는 테이블의 
	       				컬럼의 값이 존재하면 허용한다.

	       CHECK			저장 가능한 데이터 값의 범위나 조건을
	       				지정하여 설정한 값만을 허용한다.


	       . NOT NULL 제약 조건

	         : 특정 컬럼은 반드시 값이 입력되도록 필수 입력 컬럼으로 지정하는 것

		   NOT NULL은 INSERT시 즉, 데이터 입력시에
		   누락이 되어서는 안되는 부분이다.

		   NULL값이 들어가게 되면 오류가 난다.

		   CREATE TABLE TABLE_NOTNULL(
		   		LOGIN_ID VARCHAR2(20) NOT NULL,
				LOGIN_PWD VARCHAR2(20) NOT NULL,
				TEL VARCHAR2(20)
				);

		   INSERT INTO TABLE_NOTNULL (LOGIN_ID, LOGIN_PWD)
		   VALUES ('TEST_ID_01','1234');

		   INSERT INTO TABLE_NOTNULL (LOGIN_ID, TEL)
		   VALUES ('TEST_ID_02','010-123-4567'); == 오류

		   INSERT INTO TABLE_NOTNULL (LOGIN_ID, LOGIN_PWD, TEL)
		   VALUES ('TEST_ID_02','4567','010-123-4567');

		   ALTER TABLE TABLE_NOTNULL MODIFY LOGIN_ID UNIQUE;
		    == 오류, 중복키가 있어서 유니크를 줄 수 없음 지워야 가능

		    (DELETE FROM TABLE_NOTNULL WHERE LOGIN_PWD = '4567';)

		    CONSTRAINT _TYPE 제약 조건 종류
       
                        C: Check,NOT NULL
                        U: UNIQUE
                        P: PRIMARY KEY
                        R: FOREIGN KEY
                        
			 select CONSTRAINT_NAME, CONSTRAINT_TYPE,
		         r_constraint_name,table_name
			 from USER_CONSTRAINTS;

	       



