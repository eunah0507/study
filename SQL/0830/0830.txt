Q. 이름에 'T'를 포함하고 있는 사원들과 같은 부서에서
   근무하는 사원들의 이름과 사원번호를 출력하시오

   select ename, empno, deptno
   from emp
   where deptno IN (select deptno from emp where ename LIKE '%T%');

   select ename, empno, deptno
   from emp
   where deptno IN(select deptno from emp where INSTR(ename, 'T') <> 0);


Q. 급여가 평균 급여보다 많고 이름에 'S'가 들어가는 
   사원과 동일한 부서에서 근무하는 모든 사원의 이름, 급여를 출력하시오 **

   select ename, sal, deptno
   from emp
   where deptno IN(select deptno from emp where sal > (select AVG(sal) from emp)
   AND ename LIKE '%S%');


Q. 영업 사원들 보다 급여를 많이 받는 사원들의 이름, 직급, 급여를
   출력하시오. 단, 영업사원들은 제외하시오

// 다중행 서브쿼리
   select ename, sal, job
   from emp
   where sal > ALL(select sal from emp where job = 'SALESMAN');

// 단일행 서브쿼리
   select ename, sal, job
   from emp
   where sal > (select MAX(sal) from emp where job = 'SALESMAN');


Q. 10번과 20번 부서에서 근무하는 사원들의 평균 급여보다
   많이 받는 사원들의 이름, 급여, 부서번호를 출력하시오

   select ename, sal, deptno
   from emp
   where sal > (select AVG(sal) from emp where deptno = 10 OR deptno = 20);

   select ename, sal, deptno
   from emp
   where sal > (select AVG(sal) from emp where detpno IN(10,20));


Q. 'WARD'와 동일한 직급을 가진 사원의 이름과 직급을 출력하시오
   (단일행 서브쿼리 이용)

   select ename, job
   from emp
   where job = (select job from emp where ename = 'WARD');

   
다중 컬럼 서브 쿼리

select * from emp
where (deptno, sal) IN(select deptno, MAX(sal) from emp GROUP BY deptno);


exists : 중복이 없다는 가정하에 COST(검색 단가)를
         줄이기 위해 조건을 충족하는 값을 찾았을 때 바로 검색을 중지하는 함수


select * from emp
where EXISTS(select ename from emp where ename = 'WARD');


Q. 직급이 'MANAGER'인 사원들이 받는 급여들의 최소 급여보다 많이 받는
   사원들의 이름과 급여, 부서번호를 출력하되 부서번호가 20인 사람은 제외하라.

   select ename, sal, deptno
   from emp
   where sal > (select MIN(sal) from emp where job = 'MANAGER')
   AND deptno <> 20;

   select ename, sal, deptno
   from emp
   where sal > ANY(select sal from emp where job = 'MANAGER')
   AND deptno <> 20;


. ROWDUM : sub Query에서 반환되는 각 행에 1부터 시작하는 순차 값을 할당함

  select rownum, ename, sal, from emp;

  Q. emp테이블에서 최상위 소득자 3명의 이름과 급여를 표시하시오

     select ROWNUM as RANK , ename, sal
	 from (select ename, sal from emp ORDER BY sal desc)
	 where ROWNUM <= 3;

	 . ROWNUM 함수를 ORDER BY 함수와 함께 사용하면 순번이 뒤죽박죽 됩니다. 
	   그 이유는 먼저 순번을 매기고 난 후, ORDER BY 정렬을 하기 때문입니다.
	   그렇기 때문에 ORDER BY절로 정렬을 해준 후, ROWNUM을 해주어야 한다.

	   select rownum, kbs.ename, kbs.sal from
	   (select * from emp order by sal desc) kbs;


Q. 'SALES' 부서의 모든 사원의 이름과 급여를 출력하되
    월급이 높은 사람이 먼저 나오고 거기에 순번을 붙이시오.

    select rownum as rank, ename, sal
    from (select * from emp ORDER BY sal desc)
    where deptno = (select deptno from dept where dname = 'SALES');



. DDL(Data Definition Language) : 데이터 정의어, 테이블 구조 생성, 변경 및 삭제

   CREATE : 데이터베이스 객체를 생성

   DROP : 데이터베이스 객체를 삭제

   RENAME : 데이터베이스의 이름을 변경

   ALTER : 기존에 존재하는 데이터베이스 객체를 다시 정의

   TRUNCATE : 테이블을 최초 생성 상태로 만들어 ROLLBACK 불가능

   
   . CREATE TABLE : 새로운 테이블을 생성합니다.


     CREATE TABLE table_name(
     	     
	     컬럼명1   데이터타입,
	     컬럼명2   데이터타입,
	     ...
	     );


     CREATE TABLE TEST1(
     			empno  NUMBER(4),
			ename  VARCHAR(20),
			sal    NUMBER(7,2));
 
     insert into test1(empno, ename, sal)
     values(34, 'korea', 345.7);

     
     . 식별자

       1. 반드시 문자로 시작해야한다.
       2. 오라클에서 사용되는 예약어나 다른 객체명과 중복이 불가능하다(중복이 되면 안된다).
       3. A~Z까지의 대소문자, 0~9까지의 숫자, 특수기호는('_','$','#')만 포함 가능하다.
       4. 1 ~ 30자까지 가능하다.
       5. 공백을 허용하지 않는다.


       . ROWID : ROWID 데이터형은 테이블에서 행의 위치를 지정하는 
                 논리적인 주소 값입니다.

		 ROWID는 데이터베이스 전체에서 중복되지 않는 유일한 값으로
		 테이블에 새로운 행이 삽입되면 테이블 내부에서
		 의사 컬럼 형태로 자동적으로 생성됩니다.
		 ROWID는 테이블의 특정 레코드에 랜덤으로 접근하기 위해
		 주로 사용합니다.

		 ROWID는 DB에 저장되지 않으며, DB Data도 아닙니다.

	형태

	32bit		10bit		22bit		16bit		(총 80bit : 10바이트)

	000000		FFF		BBBBB		RRR
	데이터객체번호	상대적파일번호	블럭번호		행번호

       . 서브쿼리로 테이블 생성하기

       create table emp_01
       AS
       select * from emp;
       (권한은 복사되지 않는다. 그냥 값만 복사한 것)

       create table emp_02
       as
       select * from emp where deptno = 30;

       
       select table emp_03
       as
       select ename, dname, loc,sal from emp, dept
       where emp.deptno = dept.deptno
       and emp.deptno = 30;
  
       create table emp_04
       as
       select ename, sal, hiredate from emp where sal > 1500;

       create table emp_05
       as
       select * from emp where 1 = 0;
       (성립안되는 것만 적어주면 틀만 복사된다.)

       Q. dept 테이블의 구조와 동일한 테이블 dept_01을
          구절만 있는 테이블로 만드시오

	  create table dept_01
	  as
	  select * from dept where 1 = 1;

	  insert into dept_01
	  select * from dept;


    Q. 아래와 같은 테이블을 만드시오

       테이블명 : EMP_06

       컬럼	EMPNO number(4)
       		ENAME varchar2(20)
		JOB   varchar2(16)
		DEPRNO number(2)


      create table EMP_06(
     			empno  NUMBER(4),
			ename  VARCHAR(20),
			job    VARCHAR(16),
			deptno NUMBER(2));
 
     
. ALTER : ALTER 문으로 테이블의 구조를 변경한다.

          구조변경이란 컬럼을 추가(ADD), 삭제(DROP), 수정(MODIFY)한다는 뜻이다.

	  ALTER문으로 테이블의 구조를 변경할때에는

	  ALTER TABLE 테이블이름

	  추가 : ADD ((컬럼명 자료형), (컬럼명 자료형), (컬럼명 자료형) .....)
	  삭제 : DROP column((컬럼명 자료형), (컬럼명 자료형), (컬럼명 자료형).....)
	  수정 : MODIFY ((컬럼명 자료형), (컬럼명 자료형), (컬럼명 자료형) ......)

	  . ADD COLUMN 절을 사용하여 새로운 컬럼 추가
	    
	    : 원하는 위치에 넣을 수 없고 새로운 컬럼은
	      테이블 맨 마지막에 추가된다.

	      이미 이전에 추가한 로우가 존재한다면
	      그 로우에도 컬럼이 추가되지만 컬럼값은 NULL값으로 입력된다.

	  alter table emp_06
	  ADD (sal number(5));

	  alter table emp_06
	  MODIFY (sal number(8,3));

	  alter table emp_06
	  DROP column sal;

	  // 데이터가 들어있을 경우, 축소는 안되지만 확대는 된다(데이터가 바뀔 염려가 없으므로).
	  // DROP의 경우, 데이터가 들어있어도 삭제가 된다.
	  // DROP COLUMN sal;  => 테이블에 이미 존재하는 컬럼을 삭제하는 명령어


	  . SET UNUSED

	    : SET UNUSED는 사용을 논리적으로 제한할 뿐 실제로 삭제는 하지않음

	      이후 DROP UNUSED COLUMNS 로 삭제함

	      컬럼을 삭제하지는 않지만, 컬럼의 사용을 논리적으로 제한할 수 있는 옵션이다.
	      하나의 데이터를 여러 사용자가 사용하기 때문에 무조건 삭제하는 것은 위험하다.

	      SET UNUSED옵션을 사용하는 경우 : 테이블에 저장된
	      내용이 많을 경우, 해당 테이블에서 컬럼을 삭제하려면
	      꽤 오랜시간이 소요된다. 그러므로 컬럼을 삭제하는 동안 다른 사용자가
	      해당 컬럼을 사용하려고 하면 테이블이 사용되고 있기 때문에 다른 사용자는
	      해당 테이블을 이용할 수 없다. 이럴 경우 작업이 원활하게 진행되지 않고
	      LOCK(락)이 발생한다.

	      SET UNUSED 옵션은 컬럼의 사용을 논리적으로 제한할 뿐
	      실제로 삭제하지 않기 때문에 작업 시간이 오래 걸리지 않아
	      LOCK(락)이 걸리지 않는다.

	      ALTER TABLE emp_03 SET UNUSED(ename);

	      ALTER TABLE emp_03 DROP UNUSED COLUMNS;


  . CREATE, ALTER, DROP, RENAME, TRUNCATE 등 DDL을 사용하면
    자동 COMMIT이 적용된다.

  . DROP TABLE

    . 테이블 삭제

       : 기존 테이블의 존재를 제거한다.
         한 번 제거한 데이터들은 다시 복구하기 힘들다.

    . 테이블 삭제와 무결석 제약 조건

       : 삭제하고자 하는 테이블의 기본 키나 고유 키를 다른 테이블에서 참조해서
         사용하는 경우에는 해당 테이블을 제거할 수 없다.
	 이러한 경우에는 참조하는 테이블들을 먼저 제거한 후에 해당 테이블을 삭제해야 한다.

	 형식

	 DROP TABLE 테이블명
	 
	 테이블을 지우게 되면 ~~bin~~(복구할 수 있는 테이블)이 생성된다.
	 drop table 테이블명 purge; 를 쓰면 복구용테이블 없이 삭제된다.
	 (완전히 사라졌기 때문에 복구 못함)

	 되돌리고 싶을 때

	 flashback table emp_01 to before drop;

	 복구용 테이블 지우고 싶을 때

	 PURGE RECYCLEBIN;

. 테이블의 모든 레코드를 삭제하는 TRUNCATE TABLE

  TRUNCATE TABLE 테이블명

  TRUNCATE TABLE emp_02;

  컬럼명 변경

  alter table emp_02 rename COLUMN ename TO korea;

  show recyclebin;
  = 휴지통 비운거 볼 수 있음 만들어진 시점과 테이블명을 보여준다.
  (purge 옵션을 쓰지 않은 상태여야 보인다. 없다면 보이지 않는다.)


Q. dept 테이블을 복사한 dept_05 테이블을 만들고

   dept_05 테이블에

   1. tel varchar2(30) 컬럼을 추가하시오

   2. dname 컬럼의 크기를 varchar2 크기를 35로 바꾸시오

   3. loc 컬럼의 이름을 '근무지'로 바꾸시오.

    create table dept_05
       AS
       select * from dept;

    alter table dept_05
       ADD (tel varchar2(30));

    alter table dept_05
       MODIFY (dname varchar2 (35));

    alter table dept_05 rename COLUMN loc TO 근무지;
    




