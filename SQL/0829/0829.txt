 .SELF JOIN 
  
  : 조인은 서로 다른 두개 이상의 테이블을 연결하기도 하지만 하나의 테이블 내에서 
    조인을 해야 함 자료를 얻는 경우도 있습니다.
    
    셀프 조인은 자기 자신과 조인하는 경우입니다.
    
    문제 : 매니저가 'KING'인 사원들의 이름과 직급을 출력하세요
         select e.ename,e.job,e.mgr from emp e, emp dd
         where dd.empno = e.mgr and dd.ename = 'KING';
         //사원번호와 내가 구하고 싶은 상관번호가 같은 사람을 찾는 것
         
    문제 : JONES와 동일한 근무지에서 근무하는 사원이름과 월급, 근무지를 출력하세요
          단, *JONES는 제외하세요*
          
          select e.ename, e.sal, d.loc from emp e, emp dd, dept d
          where e.deptno = d.deptno and e.deptno = dd.deptno and dd.ename= 'JONES' and e.ename <> 'JONES';
               
강사님 답:  select f.ename, f.sal, d.loc from emp e, emp f, dept d
          where e.deptno = d.deptno and e.deptno = f.deptno and e.ename= 'JONES' and f.ename <> 'JONES'; 
          //약자설정 잘 봐봐..
          
    문제 : 이름이 'SMITH'인 사원의 매니저(상관) 이름을 출력하세요 
          select e.empno,e.ename, e.job,e.sal, e.deptno from emp e, emp f
          where e.empno= f.mgr and f.ename = 'SMITH';        
       
 강사님 답 : select e.ename || '의 매니저는 ' || m.ename ||' 입니다.'
          from emp e, emp m
          where e.mgr = m.empno 
          and e.ename = 'SMITH';
          //나의 상관번호와 상관의 사원번호가 동일해야한다 이거 생각해서 e랑m이 어디에 붙어야하는지 생각하기
          
  문제 : emp 테이블의 사원들의 이름과 매니저이름을 출력하세요
  
       select e.ename"사원 이름" , m.ename as "상관 이름" 
       from emp e, emp m
       where e.mgr = m.empno; 
       //KING은 상관이 없으므로 상관번호가 NULL값이므로 출력되지 않음
       //한테이블에서 두개의 테이블인 것처럼 조인하는 것
       
 
 .OUTER JOIN 
 
  : outer join 은 2개 이상의 테이블이 조인될 때 어느 한 쪽 테이블에는 해당하는 테이터가 
    존재하지 않는데 다른 쪽의 테이블에는 존재하는 경우 그 데이터는 출력되지 않는
    문제를 해결하기 위해 사용되는 조인 기법이다.
    
  : 필요시에 꼭 써야 하는 OUTER JOIN이지만 필요없을 때는 쓰지 말아야한다.
    outer join은 모든 데이터를 다 가지고 올 때 full scan 을 하기 때문에
    DB에 무리를 가할 수 있다.(자주 쓰지 않는 게 좋음)  
    
    select e.ename, d.deptno, d.dname
    from emp e, dept d
    where e.deptno = d.deptno
    order by d.deptno; //이거 실행시키면 있는 값들만 나와
    
    select e.ename, d.deptno, d.dname
    from emp e, dept d
    where e.deptno(+) = d.deptno; => 없는 쪽에 (+) 표시를 한다.
    //emp테이블에 없던 40번 부서도 출력돼
    
    문제 : 상관번호 없는 사람도 나오게 하고 싶으면?
       select e.ename"사원 이름" , m.ename as "상관 이름" 
       from emp e, emp m
       where e.mgr = m.empno(+); //매니저가 없는 사원번호에 +를 준다
       
       
    문제 : 사원이름에 'T'자가 들어가는 사원들의 이름과 부서명을 출력하세요
         select e.ename,d.dname from emp e, dept d
         where e.deptno = d.deptno and e.ename like '%T%';
         
   ANSI: select e.ename, d.dname
         from emp e NATURAL JOIN dept d
         where e.ename like '%T%';
            
    문제 : 사원 이름과 직급, 급여, 급여등급을 출력하세요
          select e.ename,e.job, e.sal, s.grade from emp e,salgrade s
          where e.sal between s.losal and s.hisal;
          
          select e.ename,e.job, e.sal, s.grade from emp e,salgrade s
          where e.sal >= s.losal and e.sal <= s.hisal;
          
          
          select e.ename,e.job, e.sal, s.grade 
          from emp e natural  join salgrade s
          where e.sal between s.losal and s.hisal;
          
          
     문제 : 'DALLAS'에서 근무하는 사원들의 이름, 직급, 부서번호, 부서이름을 출력
           select e.ename, e.job, e.deptno, d.dname
           from emp e, dept d
           where e.deptno = d.deptno 
           and d.LOC = 'DALLAS';
           
ANSI:      select e.ename, e.job, deptno, d.dname
           from emp e natural join dept d
           where d.LOC = 'DALLAS';
           
    문제 : 'SMITH'의 사원 이름, 부서번호와 'SMITH'와 같은 부서에 있는 사원 이름을 출력하세요
         (해당 사원과 같은 부서에 있는 사원을 '동료'라고 표시하세요)
         
         select e.ename,e.deptno,ee.ename 동료 
         from emp e, emp ee
         where e.deptno = ee.deptno
         and e.ename = 'SMITH' 
         and ee.ename <> 'SMITH'; 
         
 
   .SUB Query(서브 쿼리)
 
    : 서브 쿼리는 하나의 select 문장의 절 안에 포함된
      또 하나의 select 문 입니다.
      
      그렇기 때문에 서브 쿼리문을 포함하고 있는
      쿼리문을 메인 쿼리, 포함된 또 하나의 쿼리문을 서브 쿼리라고 합니다.
      
       서브 쿼리는 비교 연산자의 오른쪽에 기술해야 하고,
       반드시 괄호안에 넣어야 합니다.
       서브 쿼리는 메인 쿼리가 실행되기 전에 한 번만 실행 됩니다.
       
     문제 : 'JONES'의 부서명을 출력하세요
          select deptno  from emp where ename='JONES'; 
          
          select dname from dept where deptno=20; 
          
 JOIN :   select e.ename, e.deptno, d.dname from emp e, dept d where e.deptno=d.deptno and e.ename='JONES';
 SubQuery:select dname from dept
          where deptno=(select deptno from emp where ename='JONES');          
          //메인이 실행되기 전에 한번만 실행된다       
   
    문제 : CLARK과 같은 부서에서 근무하는 사원의 이름과
          부서명을 출력하는 쿼리문을 작성하세요
          단,'CLARK'은 제외하세요
          
     SQ : select ename,deptno from emp 
          where deptno =(select deptno from emp where ename = 'CLARK')
          and ename <> 'CLARK';      
          
     JOIN:select e.ename, ee.deptno from emp e, emp ee
          where e.deptno = ee.deptno and e.ename = 'CLARK' and ee.ename <> 'CLARK';              
           
    문제 : WARD와 동일한 직급을 가진 사원의 이름과 월급을
          출력하는 쿼리문을 작성
          
     SQ : select ename,sal,job from emp 
          where job = (select job from emp where ename ='WARD')
          and ename <> 'WARD'; 
          
     JOIN:select e.ename, e.sal,e.job from emp e, emp ee
          where e.job= ee.job and ee.ename = 'WARD'
          and e.ename <>'WARD';
          
     문제 : 평균 급여보다 많이 받는 사원의 이름과
          급여, 부서번호를 출력하되
          급여가 많은 순서로 출력하세요
          
          select ename, sal, deptno from emp
          where sal > (select avg(sal) from emp)
          order by sal desc;
          //DB는 정렬되지 않을 채로 출력되므로 정렬하고 싶으면 order by절 필수~~
          
 .단일행 Sub Query
   
   : 서브 쿼리를 수행한 결과가 1건만 나오고,
     이 결과를 메인 쿼리로 전달해서 메인 쿼리를 수행하게 된다.
     
     : 단일행 서브 쿼리는 수행 결과가 오직 하나의 row로만 
       반환하는 서브 쿼리를 갖는 것을 말합니다.  
       
       메인 쿼리의 where 절에는 단일행 비교 연산자를 이용한다
       
       = 같다
       > 크다
       < 작다
       >= 크거나 같다
       <= 작거나 같다
       <> 아니다
                    
**  문제 : 자신의 직속 상관이 'KING'인
        사원의 이름과 급여를 출력하세요
        select ename, sal from emp
        where mgr =(select empno from emp where ename  = 'KING');
        //King의 mgr은 없어 그걸 잘 생각해!!
        //'KING'이란 사람의 사원번호가 나의 상관번호
                      
        select ee.ename,ee.sal from emp e, emp ee
        where e.empno = ee.mgr and e.ename = 'KING';
          
  문제 : 부서번호가 10인 사원들 중에서 최대 급여를 받는 사원의
        이름과 월급, 직급을 출력하세요
        
        select ename,sal,job,deptno from emp
        where sal = (select MAX(sal) from emp where deptno=10);     
  
  문제 : 'DALLAS'에서 근무하는 사원의 이름, 부서번호, 근무지를 출력하는 
        서브 쿼리문을 작성
        select e.ename, deptno, d.loc from emp e, dept d
        where deptno = (select deptno from dept d where d.loc = 'DALLAS');
        
        select e.ename,e.deptno,d.loc from emp e, dept d
        where e.deptno = d.deptno and d.loc = 'DALLAS'; 
             
강사님 : select ename,emp.deptno,loc 
       from emp, dept   
       where emp.deptno = (select deptno from dept where loc = 'DALLAS')
       and loc = 'DALLAS';    //조인으로도 플어보기
       
   문제 : 'CLARK'보다 먼저 입사한 사원의 이름과 월급, 입사일 출력하세요
         (2가지)
         
      select ename,sal,hiredate from emp
      where hiredate < (select hiredate from emp where ename = 'CLARK');       
       
      select e.ename,e.sal,e.hiredate from emp e, emp ee 
      where e.hiredate < ee.hiredate and ee.ename = 'CLARK'; 
       
       
  . 다중행 sub query  
    
     : 다중행 서브 쿼리는 반환되는 결과가 
       하나 이상의 행일 때 사용하는 서브 쿼리
       
      : 다중행 서브 쿼리는 
        반드시 Multiple Row Operator(다중행 연산자)와
        함께 사용해야 합니다.
        
        종류                         의미
        
        IN                         메인 쿼리의 비교 조건이 서브 쿼리의 결과 중에서
                                   하나라도 일치 하면 참
                                   
        ANY,SOME                   메인 쿼리의 비교 조건이 서브 쿼리의
                                   검색 결과와 하나 이상 일치하면 참
                                   
        ALL                        메인 쿼리의 비교 조건이 서브 쿼리의 검색 결과와
                                   모든 값이 일치하면 참
                                   
        EXISTS                     메인 쿼리의 비교 조건이 서브 쿼리의
                                   결과 중에서 하나라도 일치하면 참
                                   검색 결과가 하나라도 존재하면 참                                                                                 
              
  문제 : IN연산자를 이용하여 부서 별로 가장 급여를 
        많이 받는 사원의 이름, 급여, 부서 번호를 출력하세요
        
        select ename,sal,deptno from emp
        where sal IN(select max(sal) from emp group by deptno);     
       
  문제 : JOB이 'MANAGER'인 사원이 속한 부서의 부서번호와
        부서명, 지역을 출력하세요
        select * from dept 
        where deptno IN(select deptno from emp where job= 'MANAGER');
        //dept와 emp에 같이 있는 걸로 비교해줘야해!!!(join생각하기)
        
  문제 : 급여를 3000이상 받는 사원이 속한 부서의 모든 사원을 출력하는 쿼리작성
        select * from emp 
        where deptno IN(select deptno from emp where sal >= 3000);     
 
        select ename,deptno, sal from emp
        where deptno in(select distinct(deptno) from emp where sal >= 3000);
       //중복배제를 안 하고 실행하면 하나씩 전부 비교한다는데...무슨 말일까..?
       
 .ALL
  
  : ALL 연산자는 메인 쿼리의 비교 조건이 
    서브 쿼리의 검색 결과와 *모두* 일치하여야 함      
       
    문제 : 30번 소속 사원들 중에서 급여를 가장 많이 받는 사원보다 
          더 많은 급여를 받는 사원의 이름과 급여를 출력하세요 (다중, 단일 다 해보기)
         select ename, sal from emp
         where sal > all(select sal from emp where deptno = 30); 
         //30번 부서(여러명)의 *모두* 보다 급여를 많이 받는 사원 찾기(다중행 서브쿼리)
         
         select ename,sal from emp
         where sal > (select max(sal) from emp where deptno = 30);   
         //얘는 하나의 값을 찾아서 비교하는 것(단일행 서브쿼리)
       
    > ALL  : 최대값 보다 큰 사람
    < ALL  : 최소값 보다 작은 사람   
    //비교는 모두와 하지만 결과적으로 그렇다는 말!   
       
    > ANY(SOME) : 최소값 보다 큰 사람 모두
    < ANY(SOME) : 최대값 보다 작은 사람 모두
    
    문제 : 30번 소속 사원 중에 가장 작은 월급을 받는 사람보다
         더 많은 급여를 받는 사람을 출력하는 쿼리(다중,단일 다 해보기)
         select* from emp 
         where sal > any(select sal from emp where deptno = 30);
              
         select* from emp 
         where sal > (select Min(sal) from emp where deptno = 30);
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
              
 
 
 
 
 
 
 
 
 
    