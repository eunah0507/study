. UNIQUE 제약조건

  : 특정 컬럼에 대해 자료가 중복되지 않게 하는 것
    (지정된 컬럼에는 유일한 값만이 저장되게 하는 것이다.)

	UNIQUE는 해당 테이블에 있어서는 존재하는 값이 유일해야 한다.
	만일 INSERT 또는 UPDATE시, 제약이 걸려 있는 컬럼에
	동일한 데이터가 존재한다면 오류가 난다.
	이 때, NULL값에 대해서는 UNIQUE 제약이 적용되지 않는다.
	즉, NULL값은 데이터로 인식하지 않기 때문에
	해당 컬럼에 NULL 데이터행이 여러개 존재 가능하다.


. 테이블 생성시 UNIQUE 설정

  CREATE TABLE TEST_TABLE(
  		COLUMN VARCHAR2(30) CONSTRANINT COLUMN1_UNQ UNIQUE(COLUMN1)
		);
		//COLUMN1_UNQ = 제약조건 이름

. 테이블 생성 후에 UNIQUE 설정

  . ALTER TABLE 테이블명 ADD CONSTRAINT 제약조건명 UNIQUE(컬럼명);

  ex) ALTER TABLE TABLE_TEST ADD CONSTRAINT COLUMN1_UNQ UNIQUE(COLUMN1);

. PRIMARY KEY 제약조건

  . UNIQUE 제약조건 + NOT NULL 제약조건

  . 컬럼명과 자료형을 기술한 다음 PRIMARY KEY를 기술하면 된다.

  . PRIMARY KEY는 하나의 테이블에 있는 데이터들을
    식별하기 위한 기준으로 인식되는 제약 조건이다.
	
	한개의 테이블에 하남나 생성이 가능하며,
	PRIMARY KEY는 NOT NULL + UNIQUE의 속성을 가진다.
	즉, NULL 값이 있으면 안되고 해당 컬럼의 데이터는 
	중복되지 않고 유일해야 한다.
	(foreign key는 여러개 존재가 가능하다.)
	UNIQUE에서와 같이 여러 컬럼들을 조합해서 지정할 수 있다.

. 무결성

  . 데이터베이스에 저장된 값들이 정확하고 일관성 있는
    데이터임을 나타내는 의미
 
  . 데이터베이스는 무결성이 보장되도록 여러 개체에
    규정을 부여하여 운영한다.

  . 즉, 필요없는 데이터는 걸러내고 필요한 데이터만 남아있는 상태를 말한다.

  . 무결성을 유지하는 것은 데이터베이스 관리시스템(DBMS)의
    중요한 기능이며, 주로 데이터에 적용되는 연산에
    제한을 두어 데이터의 무결성을 유지한다.

  . 무결성의 종류로는 개체무결성, 참조무결성, 도메인 무결성이 있다.
	
  도메인 무결성			check, not null, default

  객체 무결성			primary key, unique

  참조 무결성			foreign key

  . 도메인 무결성

    : 속성이 정의되어 있는 영역을 벗어나지 않도록 규정하는 것이다.

	  도메인 무결성에는 check, default, not null 제약이 있다.


 1.
  create table test_44
  ( empno number(4),
    ename varchar2(30) not null,
	tel varchar2(30) default '010-777-7890',
	sal number(5) default 450,
	hiredate date default sysdate,
	gender char(1)
			constraint gender_check check(gender in('M', 'F')));

2.
 select CONSTRAINT_NAME, CONSTRAINT_TYPE,
		         r_constraint_name,table_name
			 from USER_CONSTRAINTS;

3.
SQL> insert into test_44(empno,  ename, gender) values(3400, 'korea', 'K');
insert into test_44(empno,  ename, gender) values(3400, 'korea', 'K')
*
1행에 오류:
ORA-02290: 체크 제약조건(SCOTT.GENDER_CHECK)이 위배되었습니다.

SQL> insert into test_44(empno,  ename, gender) values(3400, 'korea', 'K');
insert into test_44(empno,  ename, gender) values(3400, 'korea', 'F')
== 제대로 된 행 만들어짐 (Check에 제약조건을 줘서 'M' 또는 'F'만 넣었기 때문에 오류가 난 것이다.

1. 
  create table test_55
     ( empno number(4),
       ename varchar2(30) not null,
	   tel number(1)
	 			constraint tel_check check(tel > 3));
2.
  insert into test_55 values(345, 'seoul', 2);
  insert into test_55 values(345, 'seoul', 2)
*
1행에 오류:
ORA-02290: 체크 제약조건(SCOTT.TEL_CHECK)이 위배되었습니다
(tel>3 이기 떄문에)

3. 
SQL> insert into test_55 values(345, 'seoul', 7);

1 개의 행이 만들어졌습니다.
// tel(1) 이기 때문에 한 자릿수 숫자만 들어갈 수 있다, 
   10을 넘어서부터는 tel(2)로 수정하거나, 사용할 수 없다.


. 한 테이블의 제약 조건

  select table_name, CONSTRAINT_NAME, CONSTRAINT_TYPE,
  		 r_constraint_name
  FROM USER_CONSTRAINTS
  where table_name = 'TEST_55'; ( WHERE 뒤에 오는 테이블명은 소문자로 써서는 안된다.)



. 참조 무결성

  . 행을 입력, 수정 ,삭제할 때 연관되는
    다른 테이블과의 데이터가 정확하게 유지되도록 규정하는 것이다.

  . 참조 무결성은 참조 관계에 있는 두 테이블의 데이터가
    항상 일관된 값을 가져야한다.

  . 참조 무결성에는 FOREIGN KEY 가 있다.

    . FOREIGN KEY(외래키)

       . 다른 테이블의 데이터를 참조할 때 없는 값을
         참조할 수 없도록 제약을 주는 것이다.

       . 참조될 테이블이 먼저 만들어지고 값이 입력되어야 한다.

       . 이 때, 참조될 열의 값은 참조될 테이블에서
         PRIMARY KEY로 설정되어 있어야 한다.

	 1.
	 create table parent
	     ( id number PRIMARY KEY);

	 2.
	 create table child
	     (name varchar2(30) not null,
	      id number not null,
	      CONSTRAINT ID_FK FOREIGN KEY(ID) REFERENCES PARENT(ID));

	 3.
	 insert into parent values(35);

	 4.
	 SQL> insert into child values('korea', 45);
	 insert into child values('korea', 45)
	 *
	 1행에 오류:
	 ORA-02291: 무결성 제약조건(SCOTT.ID_FK)이 위배되었습니다- 부모 키가 없습니다
	 // 35 이외의 값은 넣을 수 없다.

	 5.
	 SQL> insert into child values('korea', 35);

	 1 개의 행이 만들어졌습니다.
	 
	 // primary 키에 없는 값을 가질 수 없다.

	 6.
	 select table_name, CONSTRAINT_NAME, CONSTRAINT_TYPE,
	 		r_constraint_name
		 from USER_CONSTRAINTS
		 where table_name = 'CHILD';


. FOREIGN KEY 설정 방법
  
  . 테이블 생성시 설정

    CONSTRAINTS 외래키 이름 FOREIGN KEY(컬럼명)
    REFERENCES 참조 테이블명(참조컬럼)

  . 외래키 삭제, 해제
    
    ALTER TABLE 테이블 이름 DROP CONSTRAINT 제약 이름;

    ex) ALTER TABLE CHILD DROP CONSTRAINT ID_FK;


    1.
    CREATE TABLE TABLE_3(
      LOGIN_ID VARCHAR2(20) CONSTRAINT KO_LONID_NN NOT NULL,
      LOGIN_PWD VARCHAR2(20) CONSTRAINT KO_LGNPW_NN NOT NULL,
      LOGIN_DATA VARCHAR2(20) CONSTRAINT KO_LGNDA_U UNIQUE,
      TEL VARCHAR2(20)
      );

    2.
    ALTER TABLE TABLE_3
    	MODIFY(TEL NOT NULL);


    3.
    select table_name, CONSTRAINT_NAME, CONSTRAINT_TYPE,
	 		r_constraint_name
		 from USER_CONSTRAINTS
		 where table_name = 'TABLE_3';

    4. 
    ALTER TABLE TABLE_3
	  MODIFY(TEL UNIQUE);
 
    5. 
    ALTER TABLE TABLE_3
    	RENAME CONSTRAINT KO_LONID_NN TO SS_lonid_nn;
	


Q. 테이블명 : emp_test

    컬럼 : id varchar2(20) => primary key 부여
	  name varchar2(30) => not null
	  addr varchar2(50)
	  tel varchar2(15)
	  birth date => default sysdate
	  kor number(7,2) => default 0.0
	  eng number(7,2) => default 0.0
	  math number(7,2) => default 0.0


A.
create table emp_test(
	id varchar2(20),
	name varchar2(30) NOT NULL,
	addr varchar2(50),
	tel varchar2(15),
	birth date default sysdate,
	kor number(7,2) default 0.0,
	eng number(7,2) default 0.0,
	math number(7,2) default 0.0,
	CONSTRAINT ID_PKKK PRIMARY KEY(ID));

	
	 select table_name, CONSTRAINT_NAME, CONSTRAINT_TYPE,
	 		r_constraint_name
		 from USER_CONSTRAINTS
		 where table_name = 'EMP_TEST';

   Q. 
      테이블 명 : emp_kor

      컬럼 : id varchar2(20) => foreign key
   			    (emp_test의 id 참조)
	    total number(7,2)
	    avg   number(8,3)

   A.
   create table emp_kor(
   	  id varchar2(20),
	  total number(7,2),
	  avg number(8,3),
	  CONSTRAINT ID_FFKK FOREIGN KEY(ID) REFERENCES EMP_TEST(ID));

	   select table_name, CONSTRAINT_NAME, CONSTRAINT_TYPE,
	 		r_constraint_name
		 from USER_CONSTRAINTS
		 where table_name = 'EMP_KOR';


CONSTRAINT [제약조건 명] FOREIGN KEY([컬럼명]) REFERENCES
[참조할 테이블]([참조할 컬럼]) [ON DELETE CASCADE | ON DELETE SET NULL]

ON DELETE CASCADE - 참조되는 부모 테이블의 행에 대한 DELETE를 허용한다.
즉, 참조되는 부모테이블 값이 삭제되면 연쇄적으로 자식테이블 값 역시 삭제됩니다.

ON DELETE SET NULL - 참조되는 부모 테이블의 행에 대한 DELETE를 허용한다.
이건 CASCADE와 다른데 부모테이블의 값이 삭제되면 해당 참조하는 자식테이블의 값들은 NULL값으로 설정된다.

. 외래키 삭제, 해제

   ALTER TABLE 테이블명 DROP CONSTRAINT 제약 이름;

   ex) ALTER TABLE EMP_KOR DROP CONSTRAINT ID_FFKK;

  . SEQUENCE (시퀀스)
     
       : 시퀀스는 오라클 데이터베이스에서 특정 규칙에 맞는
         연속 숫자를 생성하는 객체입니다.
         은행이나, 병원의 대기 순번표와 마찬가지로 
         번호를 사용해야 하는 사용자에게 계속 다음 번호를 
         만들어 주는 역할을 합니다.
         
       : 단지 연속하는 새로운 번호를 만드는 일이라면 다음과 같이
         MAX 함수에 1을 더하는 값을 사용해도 상관없을 것입니다.
         
          select MAX(글번호) +1 from 게시판 이름;
          
       하지만 이 방식은 테이블 데이터가 많아 질수록 가장 큰 데이터를
       찾고 새로운 번호를 계산하는 시간이 함꼐 들어나므로 아쉬운
       부분이 됩니다. 또한 동시에 여러곳에서 새로운 번호를
       요구했을 때 select 문의 결과 값이 같게 나와 번호가 
       중복 될 수도 있습니다.
       이와 비교해서 시퀀스는 단순 번호 생성을 위한 객체 이지만
       지속적이고 효율적인 번호 생성이 가능해지므로 
       여러모로 많이 사용하는 객체입니다.      
     
     
     형식 
     
     CREATE SEQUENCE   시퀀스 이름 
     START    WITH        n                   => 시퀀스 번호의 시작값
     INCREMENT BY         n                   => 시퀀스 번호의 증가값
     MAXVALUE             n                   => 시퀀스가 가질 수 있는 최대값
     MINVALUE             n                   => 시퀀스가 가질 수 있는 최소값
     CYCLE  |  NOCYCLE                        => 지정된 시퀀스 값이 최대값에 도달 했을 때
                                                 다시 처음부터 시작함(안함)
     CACHE  |  NOCACHE                        => 메모리상에 시퀀스값을 미리 할당 기본(20)
                                                 NOCACHE는 원칙적으로 메모리상의 시퀀스를 관리 하지 않음
                                                 
     create sequence kor_seq
      start with 30
      increment by 5
      maxvalue 150
      cycle;     
      
      select kor_seq.NEXTVAL from dual; 
      
      select kor_seq.CURRVAL from dual;  //얘 처음에 쓰면 값 안 보여 nextval 쓰고 써야 보임                                                                                 
     
     
      create sequence eng_seq
      start with 50
      increment by 20
      maxvalue 250
      nocycle; 
     
      select eng_seq.NEXTVAL from dual; 
      
      select eng_seq.CURRVAL from dual;     
     //값이 250을 넘어갔을 때
     //ORA-08004: 시퀀스 ENG_SEQ.NEXTVAL exceeds MAXVALUE은 사례로 될 수 없습니다.


     1.
     create sequence emp_seq
     start with 1
     increment by 1
     maxvalue 10000
     cycle;

     2.
     create table emp_seq_1(
     id varchar2(20) primary key,
     name varchar2(20) not null,
     num number(5) default 0,
     addr varchar2(20));

     3.
     insert into emp_seq_1(id,name,num,addr) values('king_1','sun_11',emp_seq.NEXTVAL,'서울');
     insert into emp_seq_1(id,name,num,addr) values('king_2','sun_11',emp_seq.NEXTVAL,'서울');
     insert into emp_seq_1(id,name,num,addr) values('king_3','sun_11',emp_seq.NEXTVAL,'서울');
     insert into emp_seq_1(id,name,num,addr) values('king_4','sun_11',emp_seq.NEXTVAL,'서울');
     insert into emp_seq_1(id,name,num,addr) values('king_5','sun_11',emp_seq.NEXTVAL,'서울');
     // 작업하면서 1을 건너뛰고 2부터 출력될 때도 있으니 1이 안나오는 것에 대해 신경쓰지 않아도 된다.

[cascade 예제]
1.
create table emp_test2(
	id varchar2(20),
	name varchar2(30) NOT NULL,
	kor number(7,2) default 0.0,
	CONSTRAINT ID_PKKK_TEST PRIMARY KEY(ID));
	//ID_PKKK를 그대로 쓰면 오류가 난다 바꿔줘야한다

2.
create table emp_kor2(
   	  id varchar2(20),
	  total number(7,2),
	  avg number(8,3),
	  CONSTRAINT ID_FFKK_TEST FOREIGN KEY(ID) REFERENCES EMP_TEST2(ID));

3.
insert into emp_test2 values('king_1','수선화',56);
insert into emp_test2 values('king_2','수선화',56);
insert into emp_test2 values('king_3','수선화',56);
insert into emp_test2 values('king_4','수선화',56);
insert into emp_test2 values('king_5','수선화',56);

4.
insert into emp_kor2 values('king_1',567.67,343.44);
insert into emp_kor2 values('king_2',567.67,343.44);
insert into emp_kor2 values('king_3',567.67,343.44);
insert into emp_kor2 values('king_4',567.67,343.44);
insert into emp_kor2 values('king_5',567.67,343.44);

5.
SQL> delete from emp_test2 where id = 'king_4';
delete from emp_test2 where id = 'king_4'
*
1행에 오류:
ORA-02292: 무결성 제약조건(SCOTT.ID_FFKK_TEST)이 위배되었습니다- 자식 레코드가 발견되었습니다
// 외래키때문에 삭제가 안됨

6.
SQL> delete from emp_kor2 where id = 'king_4';

1 행이 삭제되었습니다.

7.
SQL> delete from emp_test2 where id = 'king_4';

1 행이 삭제되었습니다.


8. KOR2 테이블 삭제해주고 마지막에 ON DELETE CASCADE 써준 후 다시 테이블 생성

9. DROP TABLE EMP_KOR2 PURGE;

다시 만들어주기
create table emp_kor2(
   	  id varchar2(20),
	  total number(7,2),
	  avg number(8,3),
	  CONSTRAINT ID_FFKK_TEST FOREIGN KEY(ID) REFERENCES EMP_TEST2(ID) ON DELETE CASCADE);

10. 
SQL> insert into emp_kor2 values('king_1',553.21, 123.45);

1 개의 행이 만들어졌습니다.

SQL> insert into emp_kor2 values('king_2',553.21, 123.45);

1 개의 행이 만들어졌습니다.

SQL> insert into emp_kor2 values('king_3',553.21, 123.45);

1 개의 행이 만들어졌습니다.

SQL> insert into emp_kor2 values('king_4',553.21, 123.45);
insert into emp_kor2 values('king_4',553.21, 123.45)
*
1행에 오류:
ORA-02291: 무결성 제약조건(SCOTT.ID_FFKK_TEST)이 위배되었습니다- 부모 키가 없습니다
// 부모키에 아까 삭제한걸 다시 안넣어줘서 삽입이 안됨. (primary key)

11.
delete from emp_test2 where id='king_3';
select  * from emp_kor2;
//kor2의 테이블에서도 같이 삭제됨


Q. emp_test2를 참조하는 테이블 emp_eng을 만든 후, 부모키가 삭제되었을 때 emp_kor2와 emp_eng이 같이 지워지는지 확인하시오

create table emp_eng(
id varchar2(20), 
total number(7,3),
avg number(8,2),
CONSTRAINT ID_JEONG FOREIGN KEY(ID) REFERENCES EMP_TEST2 ON DELETE CASCADE);

SQL> insert into emp_eng values('king_1', 11.23, 88.12);

1 개의 행이 만들어졌습니다.

SQL> insert into emp_eng values('king_2', 11.23, 88.12);

1 개의 행이 만들어졌습니다.

SQL> insert into emp_eng values('king_3', 11.23, 88.12);
insert into emp_eng values('king_3', 11.23, 88.12)
*
1행에 오류:
ORA-02291: 무결성 제약조건(SCOTT.ID_JEONG)이 위배되었습니다- 부모 키가 없습니다


SQL> insert into emp_eng values('king_5', 11.23, 88.12);

1 개의 행이 만들어졌습니다.

delete from emp_test2 where id = 'king_1';

select * from emp_kor2;
select * from emp_eng;


Q. 테이블명 : emp_total

   컬럼 : id varchar2(20) => primary key 부여
         ename varchar2(20) => not null
	 idum number(5)
	 birth date	    => default sysdate
	 total number(7,2)  => default 0.0
	 avg number(5,2)    => default 0.0

   테이블명 : emp_kor_1

   컬럼    : id varchar2(20) => foreign key
   				(emp_total의 id참조 on delete cascade 사용)
	    ename varchar2(30)  => not null
	    kor number(3) => default 0
	    eng number(3) => default 0
	    math number(3) => default 0

   테이블명 : emp_eng_1

   컬럼   :  id varchar2(20) => foreign key
   				(emp_total의 id 참조 on delete cascade 사용)
	    ename varchar2(30) => not null
	    kor number(3) => default 0
	    eng number(3) => default 0
	    math number(3) => default 0


   CREATE SEQUENCE SEQ_TOTAL_SEQ
   	INCREMENT BY 1
	START WITH 1
	MAXVALUE 99
	MINVALUE 1
	nocycle
	nocache;


	. emp_total 의 idum은 SEQ_TOTAL_SEQ를 이용해 insert 하시오
1.
create table emp_total(	
id varchar2(20),
ename varchar2(20) not null,
idum number(5),
birth date default sysdate,
total number(7,2) default 0.0,
avg number(5, 2) default 0.0,
CONSTRAINT ID_JEONG_1 PRIMARY KEY(ID));

insert into emp_total values('king_1', '수선화', SEQ_TOTAL_SEQ.NEXT_LEXTVAL, sysdate, 45.12, 55.22);
insert into emp_total values('king_2', '수선화', SEQ_TOTAL_SEQ.NEXT_LEXTVAL, sysdate, 45.12, 55.22);
insert into emp_total values('king_3', '수선화', SEQ_TOTAL_SEQ.NEXT_LEXTVAL, sysdate, 45.12, 55.22);
insert into emp_total values('king_4', '수선화', SEQ_TOTAL_SEQ.NEXT_LEXTVAL, sysdate, 45.12, 55.22);
insert into emp_total values('king_5', '수선화', SEQ_TOTAL_SEQ.NEXT_LEXTVAL, sysdate, 45.12, 55.22);

2.
create table emp_kor_1(
id varchar2(20),
ename varchar2(30) not null,
kor number(3) default 0,
eng number(3) default 0,
math number(3) default 0,
CONSTRAINT ID_JEONG_2 FOREIGN KEY(ID) REFERENCES EMP_TOTAL(ID) ON DELETE CASCADE);

insert into emp_kor_1 values('king_1', '튤립', 12, 34, 45);
insert into emp_kor_1 values('king_2', '튤립', 12, 34, 45);
insert into emp_kor_1 values('king_3', '튤립', 12, 34, 45);
insert into emp_kor_1 values('king_4', '튤립', 12, 34, 45);
insert into emp_kor_1 values('king_5', '튤립', 12, 34, 45);

3.
create table emp_eng_1(
id varchar2(20),
ename varchar2(30) not null,
kor number(3) default 0,
eng number(3) default 0,
math number(3) default 0,
CONSTRAINT ID_JEONG_3 FOREIGN KEY(ID) REFERENCES EMP_TOTAL(ID) ON DELETE CASCADE);

insert into emp_eng_1 values('king_1', '노트북', 57, 512, 328);
insert into emp_eng_1 values('king_2', '노트북', 57, 512, 328);
insert into emp_eng_1 values('king_3', '노트북', 57, 512, 328);
insert into emp_eng_1 values('king_4', '노트북', 57, 512, 328);
insert into emp_eng_1 values('king_5', '노트북', 57, 512, 328);

4.   
   CREATE SEQUENCE SEQ_TOTAL_SEQ
   	INCREMENT BY 1
	START WITH 1
	MAXVALUE 99
	MINVALUE 1
	nocycle
	nocache;

. 시퀀스 값을 알아보는 CURRVAL과 NEXTVAL

  CURRVAL

     : 시퀀스의 현재 값을 알아내기 위해서 사용
       CURRVAL에 새로운 값을 할당받기 위해서는

       NEXTVAL로 새로운 값을 생성해야 한다.
       즉, NEXTVAL로 새로운 값을 생성하여 새로운 값을
       CURRVAL에 대체해야 한다.

  NEXTVAL

     : 시퀀스의 다음 값을 알아내기 위해 사용

       SELECT LAST_NUMBER
       FROM USER_SEQUENCES
       WHERE SEQUENCE_NAME = 'SEQ_TOTAL_SEQ'; //반드시 대문자로 쓸 것 






